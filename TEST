{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8uy4SeoFWVO6+GWFBFVp1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Su412/demo-/blob/main/TEST\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c0NU7iWa-1__",
        "outputId": "3c177bd0-e64e-4f4c-8abe-b6f49c19dbc6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app '__main__'\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n",
            " * Running on http://127.0.0.1:5000\n",
            "INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "from pickle import TRUE\n",
        "\n",
        "\n",
        "{\n",
        "\n",
        "\n",
        "        \"version\": \"0.2.0\",\n",
        "        \"configurations\": [\n",
        "            {\n",
        "                \"type\": \"node\",\n",
        "                \"request\": \"launch\",\n",
        "                \"name\": \"Launch Program\",\n",
        "                \"skipFiles\": [\n",
        "                    \"<node_internals>/**\"\n",
        "                ],\n",
        "                \"program\": \"${workspaceFolder}/api/index.js\"\n",
        "            },\n",
        "            {\n",
        "                \"name\": \"Python: Flask\",\n",
        "                \"type\": \"python\",\n",
        "                \"request\": \"launch\",\n",
        "                \"program\": \"${workspaceFolder}/app.py\",\n",
        "                \"env\": {\n",
        "                    \"FLASK_APP\": \"app.py\",\n",
        "                    \"FLASK_ENV\": \"development\"\n",
        "                },\n",
        "                \"args\": [\n",
        "                    \"run\",\n",
        "                    \"--no-debugger\",\n",
        "                    \"--no-reload\"\n",
        "                ],\n",
        "                \"jinja\": TRUE\n",
        "            }\n",
        "        ]\n",
        "    }\n",
        "\n",
        "from flask import Flask, request, jsonify  # 這行應與上一行程式碼對齊\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route(\"/webhook\", methods=[\"POST\"])\n",
        "def webhook():\n",
        "    body = request.json\n",
        "    event = body[\"events\"][0]\n",
        "\n",
        "    # 處理功能選單的 postback 事件\n",
        "    if event[\"type\"] == \"postback\":\n",
        "        data = event[\"postback\"][\"data\"]\n",
        "        if data == \"action=show_menu\":\n",
        "            return show_menu_response()\n",
        "\n",
        "    # 處理其他 postback 事件\n",
        "    return 'OK'  # 防止後續被一併處理\n",
        "\n",
        "    # 處理一般溝通事件\n",
        "    if event[\"type\"] == 'message' and 'text' in event[\"message\"]:\n",
        "        user_message = event[\"message\"][\"text\"]\n",
        "        # 與 ChatGPT 交互的邏輯\n",
        "        chatgpt_response = get_chatgpt_response(user_message)\n",
        "        reply = {\n",
        "            ...\n",
        "        }\n",
        "        return jsonify(reply)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run()\n"
      ]
    }
  ]
}